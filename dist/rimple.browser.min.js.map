{"version":3,"file":"rimple.browser.min.js","sources":["index.js","op/object.js","op/number.js","op/boolean.js","op/list.js"],"sourcesContent":["import booleanOps from './op/boolean';\nimport objectOps from './op/object';\nimport numberOps from './op/number';\nimport listOps from './op/list';\n\nconst _uniqueId = function _uniqueId() {\n  let i = 1;\n  return function (prefix='') {\n    return prefix + i++;\n  };\n}();\n\nconst _isEmptyObj = function _isEmptyObj(obj) {\n  for(const key in obj) {\n    if(obj.hasOwnProperty(key))\n      return false;\n  }\n  return true;\n};\n\nconst _objectValues = function _objectValues(obj) {\n  if (Object.values) {\n    return Object.values(obj);\n  }\n  const values = [];\n  for (let key in obj){\n    if (obj.hasOwnProperty(key)) {\n      values.push(obj[key]);\n    }\n  }\n  return values;\n};\n\n/**\n * @constructor\n *\n * @desc A Slot could be created in 2 methods:\n *\n *  * new Slot(value)\n *\n *  this will make a data slot\n *\n *  * new Slot(valueFunc, followings)\n *\n *  this will make a follower slot, where followings is an Array.\n *  if the element (say *following*) in observables is a:\n *\n *    * Slot\n *\n *      if *following* changed, *follower* will be re-evaludated by executing *valueFunc*,\n *      following.val() will be used as valueFunc's argument.\n *      its new value is the return value of *valueFunc*, and change will be propogated to\n *      *follower*'s followers.\n *\n *    * not Slot\n *\n *      when *follower* is re-evaluated, following will be used as *valueFunc*'s argument directly.\n *\n *  and valueFunc will accept 2 parameters:\n *\n *    * the current value of observables\n *    * mutation process context, it has two keys:\n *\n *      * roots - the mutation process roots, namely, those changed by clients (api caller)\n *        directly\n *\n *      * involved - the observed involed in this mutation process\n *\n *      the context is very useful if the evaluation function needs to return value\n *      according to which of its followings mutated\n *\n *  let's see two example:\n *\n *  ```javascript\n *\n *  const $$following = Slot(1);\n *  const $$follower = Slot((following, n) => following + n, [$$following, 2]);\n *  console.log($$follower.val()); // output 3, since n is always 2\n *\n *  $$following.inc();\n *  console.log($$follower.val()); // output 4, since n is always 2\n *  ```\n *\n *  ```javascript\n *\n *  const $$a = Slot(1).tag('a');\n *  const $$b = Slot(([a]) => a + 1, [$$a]).tag('b');\n *  const $$c = Slot(2).tag('c');\n *  const $$d = Slot(function ([a, b], {roots, involved}) {\n *    console.log(roots.map(it => it.tag())); // output [a]\n *    console.log(involved.map(it => it.tag())); // output [b]\n *    return a + b;\n *  });\n *\n *  // a is root of mutation proccess, and c is not changed in this mutation proccess\n *  $$a.inc();\n *\n *  ```\n *\n * */\nexport const Slot = function Slot(...args) {\n  if (!(this instanceof Slot)) {\n    return new Slot(...args);\n  }\n  this._id = _uniqueId();\n  this._changeCbs = [];\n  this._followings = [];\n  this._followerMap = {};\n  // offsprings are all direct or indirect followers\n  this._offspringMap = {};\n  this._offspringLevels = [];\n  this._tag = '';\n  Object.defineProperty(this, 'token', {\n    get: function get() {\n      return this._tag + '-' + this._id;\n    }\n  });\n  Object.defineProperty(this, 'followings', {\n    get: function get() {\n      return this._followings;\n    }\n  });\n  Object.defineProperty(this, 'followers', {\n    get: function get() {\n      return _objectValues(this._followerMap);\n    }\n  });\n  if (args.length <= 1) {\n    this._value = args[0];\n  } else {\n    const [valueFunc, followings, eager] = args;\n    this.follow(valueFunc, followings, eager);\n  }\n};\n\n/**\n * test if slot observes others\n * @return {boolean} true if it observes others, else false\n * */\nSlot.prototype.isTopmost = function isTopmost() {\n  return !this._followings.length;\n};\n\n/**\n * Set/get tag of slot, useful when debugging.\n *\n * @example\n * // set tag will return this\n * const $$s = Slot('foo').tag('bar');\n * console.log($$s.tag()); // output bar\n *\n * @param {(string|undefined)} v - if is string, set the tag of slot and return this,\n * else return the tag\n * @return {(string|Slot)}\n * */\nSlot.prototype.tag = function tag(v) {\n  if (v == void 0) {\n    return this._tag;\n  }\n  this._tag = v;\n  return this;\n};\n\n/**\n * set a handler to Slot to test if slot is mutated, here is an example:\n *\n * @example\n * let $$s1 = Slot(true);\n * let $$s2 = Slot(false);\n *\n * let $$s3 = Slot((s1, s2) => s1 && s2, [$$s1, $$s2])\n * .mutationTester((oldV, newV) => oldV != newV);\n *\n * $$s4 = $$s3.makeFollower((s3) => !s3)\n * .change(function () {\n *    console.log('s4 changed!');\n * });\n *\n * // $$s2 will be changed to true, but $$s3 is not changed,\n * // neither $$s4 will be changed\n * $$s2.toggle();\n *\n *\n * @param {function} tester - a handler to test if slot is changed in one mutation\n * process, if a slot finds all its dependents are unmutation, the mutation process\n * stops from it.\n * A propriate tester will improve the performance dramatically sometimes.\n *\n * it access slot as *this* and slot's new value and old value as arguments,\n * and return true if slot is changed in mutation process, else false.\n *\n * */\nSlot.prototype.mutationTester = function mutationTester(tester) {\n  this._mutationTester = tester;\n  return this;\n};\n\n/**\n * add a change handler\n *\n * !!!Warning, this is a very dangerous operation if you modify slots in\n * change handler, consider the following scenario:\n *\n * ```javascript\n *  let $$s1 = Slot(1);\n *  let $$s2 = $$s1.makeFollower(it => it * 2);\n *  let $$s3 = $$s1.makeFollower(it => it * 3);\n *  $$s2.change(function () {\n *    $$s1.val(3); // forever loop\n *  ));\n *\n *  $$s1.val(2);\n * ```\n *\n *\n *  as a thumb of rule, don't set value for followings in change handler\n *\n * @param {function} proc - it will be invoked when slot is mutated in one\n * mutation process the same order as it is added, it accepts the following\n * parameters:\n *\n *   * new value of Slot\n *   * the old value of Slot\n *   * the mutation context\n *\n * for example, you could refresh the UI, when ever the final view changed\n *\n * @return {Slot} this\n *\n * */\nSlot.prototype.change = function (proc) {\n  this._changeCbs.push(proc);\n  return this;\n};\n\n/**\n * remove the change handler\n *\n * @see {@link Slot#change}\n * */\nSlot.prototype.offChange = function (proc) {\n  this._changeCbs = this._changeCbs.filter(cb => cb != proc);\n};\n\nSlot.prototype.clearChangeCbs = function clearChangeCbs() {\n  this._changeCbs = [];\n};\n\n/**\n * detach the target slot from its followings, and let its followers\n * connect me(this), just as if slot has been eliminated after the detachment.\n * this method is very useful if you want to change the dependent graph\n *\n * !!NOTE this method will not re-evaluate the slot and starts the mutation process\n * at once, so remember to call touch at last if you want to start a mutaion process\n *\n * @param {Slot} targetSlot\n * @return {Slot} this\n *\n * */\nSlot.prototype.override = function override(targetSlot) {\n  for (let following of targetSlot._followings) {\n    delete following._followerMap[targetSlot._id];\n  }\n  for (let followerId in targetSlot._followerMap) {\n    let follower = targetSlot._followerMap[followerId];\n    this._followerMap[followerId] = follower;\n    for (let i = 0; i < follower._followings.length; ++i) {\n      if (follower._followings[i]._id == targetSlot._id) {\n        follower._followings[i] = this;\n        break;\n      }\n    }\n  }\n  this._offspringMap = this._offspringLevels = void 0;\n  // make ancestors _offspringMap obsolete, why not just calculate _offspringMap\n  // for each ancestor? since this operation should be as quick as possible\n  // and multiple override/replaceFollowing/connect operations could be batched,\n  // since the calculation of springs of ancestors postponed to the moment\n  // when ancestor is evaluated\n  targetSlot._getAncestors().forEach(function (ancestor) {\n    ancestor._offspringLevels = ancestor._offspringMap = void 0;\n  });\n  return this;\n};\n\n\n/**\n * replaceFollowing, why not just re-follow, since follow is a quite\n * expensive operation, while replaceFollowing only affect the replaced one\n *\n * !!NOTE this method will not re-evaluate the slot and starts the mutation process\n * at once, so remember to call touch at last if you want to start a mutaion process\n *\n * @param idx the index of following\n * @param following a slot or any object, if not provided, the \"idx\"th following will\n * not be followed anymore.\n *\n * @return {Slot} this\n */\nSlot.prototype.replaceFollowing = function replaceFollowing(idx, following) {\n  let args = [idx, 1];\n  if (following != void 0) {\n    args.push(following);\n  }\n  let [replaced] = this.followings.splice.apply(this.followings, args);\n  // replace the same following, just return\n  if (replaced == following) {\n    return this;\n  }\n  if (replaced instanceof Slot) {\n    delete replaced._followerMap[this._id];\n    replaced._offspringLevels = replaced._offspringMap = void 0;\n    replaced._getAncestors().forEach(function (ancestor) {\n      ancestor._offspringLevels = ancestor._offspringMap = void 0;\n    });\n  }\n  if (following instanceof Slot) {\n    following._offspringLevels = following._offspringMap = void 0;\n    // make ancestors _offspringMap obsolete\n    following._getAncestors().forEach(function (ancestor) {\n      ancestor._offspringLevels = ancestor._offspringMap = void 0;\n    });\n  }\n  return this;\n};\n\n/**\n * this is the shortcut of replaceFollowing(idx)\n *\n * !!NOTE this method will not re-evaluate the slot and starts the mutation process\n * at once, so remember to call touch at last if you want to start a mutaion process\n *\n * @param {number} idx - the index of\n * */\nSlot.prototype.removeFollowing = function removeFollowing(idx) {\n  return this.replaceFollowing(idx);\n};\n\n// propogate from me\nSlot.prototype._propogate = function ({ roots }) {\n  // if has only one follower, touch it\n  let followers = _objectValues(this._followerMap);\n  if (followers.length == 0) {\n    return;\n  }\n  if (followers.length == 1) {\n    followers[0].touch(true, { roots, involved: [this] });\n    return;\n  }\n  if (this._offspringLevels === void 0 || this._offspringMap === void 0) {\n    this._setupOffsprings();\n  }\n  let cleanSlots = {};\n  // mutate root is always considered to be dirty,\n  // otherwise it won't propogate\n  let mutateRoot = this;\n  let changeCbArgs = [];\n  for (let level of this._offspringLevels) {\n    for (let follower of level) {\n      let involved = follower._followings.filter(function (following) {\n        return following instanceof Slot &&\n          (following._id === mutateRoot._id ||\n           (mutateRoot._offspringMap[following._id] && !cleanSlots[following._id]));\n      });\n      // clean follower will be untouched\n      let dirty = involved.length > 0;\n      if (!dirty) {\n        cleanSlots[follower._id] = follower;\n        continue;\n      }\n      follower.debug && console.info(`slot: slot ${follower._tag} will be refreshed`);\n      let context = {involved, roots};\n      let oldV = follower._value;\n      // DON'T CALL change callbacks\n      if (follower.touch(false, context, false)) {\n        changeCbArgs.push([follower, oldV, involved]);\n      } else {\n        cleanSlots[follower._id] = follower;\n      }\n    }\n  }\n  // call change callbacks at last\n  changeCbArgs.forEach(function ([slot, oldV, involved]) {\n    for (let cb of slot._changeCbs) {\n      cb.apply(slot, [slot._value, oldV, { involved, roots }]);\n    }\n  });\n};\n\n/**\n * get or set the value, if no argument is given, get the current value of Slot,\n * otherwise, set the value of Slot, *the mutation process* starts, and returns *this*\n *\n * @return {(any|Slot)}\n * */\nSlot.prototype.val = function val(...args) {\n  if (args.length === 0) {\n    if (this._value === void 0 && typeof this._valueFunc === 'function') {\n      this._value = this._valueFunc.apply(\n        this, [\n          this._followings.map(it => it instanceof Slot? it.val(): it),\n          { roots: [ this ] },\n        ]\n      );\n    }\n    return this._value;\n  }\n  return this.setV(args[0]);\n};\n\n/**\n * set the slot's value, and starts a *mutation process*\n *\n * @param {any} newV - the new value of slot,\n * */\nSlot.prototype.setV = function setV(newV) {\n  if (typeof this._mutationTester === 'function' && !this._mutationTester(this._value, newV)) {\n    return this;\n  }\n  this.debug && console.info(\n    `slot: slot ${this._tag} mutated -- `, this._value, '->', newV\n  );\n  let oldV = this._value;\n  this._value = newV;\n  this._propogate({ roots: [this] });\n  for (let cb of this._changeCbs) {\n    cb.apply(this, [this._value, oldV, {\n      roots: [this],\n    }]);\n  }\n  return this;\n};\n\n\nconst _colletFollowers = function _colletFollowers(slots) {\n  let ret = {};\n  for (let o of slots) {\n    for (let k in o._followerMap) {\n      let follower = o._followerMap[k];\n      ret[follower._id] = follower;\n    }\n  }\n  return _objectValues(ret);\n};\n\nSlot.prototype._setupOffsprings = function () {\n  this._offspringMap = {};\n  this._offspringLevels = [];\n  if (_isEmptyObj(this._followerMap)) {\n    return this;\n  }\n  // level by level\n  for (\n    let _offspringMap = _objectValues(this._followerMap), level = 1;\n    _offspringMap.length;\n    _offspringMap = _colletFollowers(_offspringMap), ++level\n  )  {\n    for (let i of _offspringMap) {\n      if (!(i._id in this._offspringMap)) {\n        this._offspringMap[i._id] = {\n          slot: i,\n          level: level\n        };\n      } else {\n        this._offspringMap[i._id].level = Math.max(\n          this._offspringMap[i._id].level, level\n        );\n      }\n    }\n  }\n  let currentLevel = 0;\n  let slots;\n  for (\n    let { slot, level } of\n    _objectValues(this._offspringMap).sort((a, b) => a.level - b.level)\n  ) {\n    if (level > currentLevel) {\n      slots = [];\n      this._offspringLevels.push(slots);\n      currentLevel = level;\n    }\n    slots.push(slot);\n  }\n  return this;\n};\n\n/**\n * touch a slot, that means, re-evaluate the slot's value forcely, and\n * starts *mutation process* and call change callbacks if neccessary.\n * usually, you don't need call this method, only when you need to mutate the\n * following graph (like override, replaceFollowing, follow)\n *\n * @param propogate - if starts a *mutation process*, default is true\n * @param context - if null, the touched slot is served as roots, default is null\n * @param callChangeCbs - if call change callbacks, default is true\n *\n * @return {boolean} - return true if this Slot is mutated, else false\n *\n * @see Slot#override\n * */\nSlot.prototype.touch = function (propogate=true, context=null, callChangeCbs=true) {\n  let oldValue = this._value;\n  if (!context) {\n    context = { roots: [this] };\n  }\n  if (this._valueFunc) {\n    let args = [\n      this._followings.map(following => following instanceof Slot? following.val(): following),\n      context,\n    ];\n    this._value = this._valueFunc.apply(this, args);\n  }\n  if (typeof this._mutationTester == 'function' && !this._mutationTester(oldValue, this._value)) {\n    return false;\n  }\n  if (callChangeCbs) {\n    for (let cb of this._changeCbs) {\n      cb.apply(this, [this._value, oldValue, context]);\n    }\n  }\n  propogate && this._propogate({ roots: context.roots });\n  return true;\n};\n\n/**\n * make a follower slot of me. this following has only one followings it is me.\n * @example\n * const $$s1 = Slot(1);\n * const $$s2 = $$s1.fork(n => n + 1);\n *\n * is equivalent to:\n *\n * @example\n * const $$s1 = Slot(1);\n * const $$s2 = Slot(([n]) => n + 1, [$$s1]);\n *\n * @param {function} func - the evaluation function\n * */\nSlot.prototype.fork = function (func) {\n  return Slot(function ([following]) {\n    return func(following);\n  }, [this]);\n};\n\n/**\n * unfollow all the followings if any and follow the new followings using the new\n * valueFunc, this method will mutate the following graph.\n *\n * !!NOTE this method will not re-evaluate the slot and starts the mutation process\n * at once, so remember to call touch at last if you want to start a mutaion process\n *\n * @param {function} valueFunc\n * @param {array} followings - please see Slot's constructor\n *\n * @return {Slot} this\n *\n * @see {@link Slot}\n * */\nSlot.prototype.follow = function (valueFunc, followings) {\n  // if connect to the same followings, nothing happens\n  let connectTheSameFollowings = true;\n  for (let i = 0; i < Math.max(followings.length, this._followings.length); ++i) {\n    if (followings[i] != this._followings[i]) {\n      connectTheSameFollowings = false;\n      break;\n    }\n  }\n  if (connectTheSameFollowings && (valueFunc == this._valueFunc)) {\n    return this;\n  }\n  let self = this;\n  // make my value invalid\n  self._value = void 0;\n  self._valueFunc = valueFunc;\n  // affected followings slots\n  let affected = {};\n  for (let slot of followings) {\n    if (slot instanceof Slot) {\n      affected[slot._id] = slot;\n    }\n  }\n  for (let following of self._followings) {\n    if (following instanceof Slot) {\n      if (followings.every(function (s) {\n        return s !== following;\n      })) {\n        affected[following._id] = following;\n        delete following._followerMap[self._id];\n      }\n    }\n  }\n  // setup followings\n  self._followings = [];\n  followings.forEach(function (slot) {\n    self._followings.push(slot);\n    if (slot instanceof Slot) {\n      slot._followerMap[self._id] = self;\n    }\n  });\n  // make ancestors' _offspringMap obsolete, it will be\n  // recalculated until they are evaluated\n  self._getAncestors().forEach(function (ancestor) {\n    ancestor._offspringLevels = ancestor._offspringMap = void 0;\n  });\n  return self;\n};\n\nSlot.prototype._getAncestors = function _getAncestors() {\n  let ancestors = {};\n  for (let following of this._followings) {\n    if (following instanceof Slot) {\n      if (!ancestors[following._id]) {\n        ancestors[following._id] = following;\n        for (let ancestor of following._getAncestors()) {\n          ancestors[ancestor._id] = ancestor;\n        }\n      }\n    }\n  }\n  return _objectValues(ancestors);\n};\n\n\n/**\n * shrink to a data slot with value *val*\n * @return {Slot} this\n * */\nSlot.prototype.shrink = function (val) {\n  this._valueFunc = void 0;\n  return this.follow(void 0, []).val(val);\n};\n\n\n/**\n * mutate a group of slots by applying functions upon them, and starts a\n * *mutation proccess* whose roots are these slots to be changed\n *\n * NOTE!!! this is not the same as set value for each slot one by one, but\n * consider them as a whole to find the best mutaion path\n *\n * @example\n * let $$p1 = Slot(1).tag('p1');\n * let $$p2 = Slot(2).tag('p2');\n * let $$p3 = $$p2.fork(it => it + 1).tag('p3');\n * let $$p4 = Slot(function ([p1, p2, p3], { roots, involved }) {\n *   console.log(roots.map(it => it.tag())); // p1, p2\n *   console.log(involved.map(it => it.tag())); // p1, p2, p3\n *   return p1 + p2 + p3;\n * }, [$$p1, $$p2, $$p3]);\n * rimple.mutateWith([\n *   [$$p1, n => n + 1],\n *   [$$p2, n => n + 2],\n * ]);\n * console.log($$p1.val(), $$p2.val(), $$p3.val(), $$p4.val()); // 2, 4, 5, 11\n *\n * @param {array} slotValuePairs - each element is an array, whose first value is\n * a Slot, and second is the function to be applied\n *\n * */\nexport const mutateWith = function mutateWith(slotFnPairs) {\n  return mutate(slotFnPairs.map(function ([slot, fn]) {\n    return [slot, fn && fn.apply(slot, [slot.val()])];\n  }));\n};\n\n/**\n * mutate a group of slots, and starts ONE *mutation proccess* whose\n * roots are these slots to be changed.\n *\n * NOTE!!! this is not the same as set value for each slot one by one, but\n * consider them as a whole to find the best mutaion path\n *\n * @example\n * let $$p1 = Slot(1).tag('p1');\n * let $$p2 = Slot(2).tag('p2');\n * let $$p3 = $$p2.fork(it => it + 1).tag('p3');\n * let $$p4 = Slot(function ([p1, p2, p3], { roots, involved }) {\n *   console.log(roots.map(it => it.tag())); // p1, p2\n *   console.log(involved.map(it => it.tag())); // p1, p2, p3\n *   return p1 + p2 + p3;\n * }, [$$p1, $$p2, $$p3]);\n * rimple.mutate([\n *   [$$p1, 2],\n *   [$$p2, 4],\n * ]);\n * console.log($$p1.val(), $$p2.val(), $$p3.val(), $$p4.val()); // 2, 4, 5, 11\n *\n * @param {array} slotValuePairs - each element is an array, whose first value is\n * a Slot, and second is the new value of slots\n *\n * */\nexport const mutate = function (slotValuePairs) {\n  let cleanSlots = {};\n  let roots = slotValuePairs.map(([slot]) => slot);\n  // mutate the targets directly\n  slotValuePairs.forEach(function ([slot, value]) {\n    slot.debug && console.info(`slot ${slot._tag} mutationTester`, slot._value, value);\n    let oldValue = slot._value;\n    if (value !== void 0) {\n      slot._value = value;\n      if (slot._mutationTester && !slot._mutationTester(oldValue, value)) {\n        cleanSlots[slot._id] = slot;\n        return;\n      }\n    }\n    for (let cb of slot._changeCbs) {\n      cb.call(slot, slot._value, oldValue, { roots });\n    }\n  });\n  // related slots include roots\n  let relatedSlots = {};\n  let addToRelatedSlots = function (slot, level) {\n    if (slot._id in relatedSlots) {\n      relatedSlots[slot._id].level = Math.max(\n        level, relatedSlots[slot._id].level\n      );\n    } else {\n      relatedSlots[slot._id] = {\n        slot,\n        level,\n      };\n    }\n  };\n  slotValuePairs.forEach(function ([slot]) {\n    addToRelatedSlots(slot, 0);\n    if (slot._offspringMap === void 0) {\n      slot._setupOffsprings();\n    }\n    _objectValues(slot._offspringMap).forEach(function ({slot: offspring, level}) {\n      addToRelatedSlots(offspring, level);\n    });\n  });\n  // group _offspringMap by level, but omits level 0 (those mutated directly)\n  // since they have been touched\n  let slots;\n  let levels = [];\n  let currentLevel = 0;\n  _objectValues(relatedSlots)\n  .sort((a, b) => a.level - b.level)\n  .filter(it => it.level > 0)\n  .forEach(function ({slot, level}) {\n    if (level > currentLevel) {\n      slots = [];\n      levels.push(slots);\n      currentLevel = level;\n    }\n    slots.push(slot);\n  });\n  let changeCbArgs = [];\n  for (let level of levels) {\n    for (let follower of level) {\n      let involved = follower._followings.filter(function (p) {\n        return p instanceof Slot && relatedSlots[p._id] && !cleanSlots[p._id];\n      });\n      if (!involved.length) {\n        cleanSlots[follower._id] = follower;\n        continue;\n      }\n      follower.debug && console.info(\n        `slot: slot ${follower._tag} will be refreshed`\n      );\n      let context = { involved, roots };\n      // DON'T use val(), val will reevaluate this slot\n      let oldV = follower._value;\n      // DON'T CALL change callbacks\n      if (follower.touch(false, context, false)) {\n        changeCbArgs.push([follower, oldV, involved]);\n      } else {\n        cleanSlots[follower._id] = follower;\n      }\n    }\n  }\n  // call change callbacks at last\n  changeCbArgs.forEach(function ([slot, oldV, involved]) {\n    for (let cb of slot._changeCbs) {\n      cb.apply(slot, [slot._value, oldV, { involved, roots }]);\n    }\n  });\n};\n\n/**\n * apply the function to me\n *\n * @example\n * const $$s = Slot(1);\n * $$s.mutateWith(function (s, n) {\n *  return s + n;\n * }, [2]);\n * console.log($$s.val()); // output 3\n *\n * is equivalent to\n * @example\n * const $$s = Slot(1);\n * $$s.val(function (s, n) { return s + n; }($$s.val(), 2));\n *\n * @param {function} func - the mutation function\n * @param {array} args - the extra arguments provided to func, default is []\n *\n * @return {Slot} this\n *\n * */\nSlot.prototype.mutateWith = function mutateWith(func, args=[]) {\n  args = [this._value].concat(args);\n  return this.val(func.apply(this, args));\n};\n\n/**\n * add methods to Slot's prototype\n *\n * @example\n * rimple.mixin({\n *   negate() {\n *     return this.val(-this.val());\n *   }\n * });\n * const $$s = Slot(1).negate();\n * console.log($$s.val()); // output -1\n *\n * @param {object} mixins - the mixins to be added\n *\n * */\nexport const mixin = function mixin(mixins) {\n  Object.assign(Slot.prototype, mixins);\n};\n\n/**\n * create an immutable slot, which use '===' to test if value is mutated\n * */\nexport const immSlot = function (value) {\n  return Slot(value).mutationTester(function (a, b) {\n    return a !== b;\n  });\n};\n\nmixin(booleanOps);\nmixin(objectOps);\nmixin(numberOps);\nmixin(listOps);\n\nexport const slot = Slot;\n","/**\n * these are a group of operations to mutate a slot with value type of Object\n *\n * @lends Slot.prototype\n *\n * */\nconst patch = {\n  /**\n   * patch the object value\n   * @example\n   * const $$s = $$({ name: 'Tom', color: 'Blue' });\n   * $$s.patch({ name: 'Jerry', species: 'Mouse' });\n   * console.log($$s.val()); // { name: 'Jerry', species: 'Mouse', colur: 'Blue' }\n   *\n   * @param {object} obj - object used to patch me\n   * @return {Slot} this\n   *\n   * */\n  patch(obj) {\n    this.debug && console.info(\n      `slot: slot ${this.tag()} is about to be patched`, obj\n    );\n    return this.val(Object.assign({}, this.val(), obj));\n  },\n  /**\n   * omit the keys\n   * @example\n   * const $$s = $$({ name: 'Tom', color: 'Blue' });\n   * $$s.omit(['color']);\n   * console.log($$s.val(); // { name: 'Tom' }\n   *\n   * @return {Slot} this\n   * */\n  omit(keys) {\n    for (let field of keys) {\n      delete this._value[field];\n    }\n    return this.val(Object.assign({}, this._value));\n  },\n  /**\n   * set the property of Slot's value\n   * @example\n   * const $$s = $$({ name: 'Tom', color: 'Red' });\n   * $$s.set('color', 'Blue');\n   * console.log($$s.val(); // { name: 'Tom', color: 'Red' }\n   *\n   * @return {Slot} this\n   * */\n  set(prop, value) {\n    if (typeof value == 'function') {\n      value = value.apply(this, [this._value[prop]]);\n    }\n    this._value[prop] = value;\n    this.val(\n      Array.isArray(this._value)?\n        [].concat(this._value):\n        Object.assign({}, this._value)\n    );\n    return this;\n  },\n  /**\n   * set the deep property of Slot's value\n   * @example\n   * const $$s = $$({ name: 'Tom' });\n   * $$s.setIn(['friend', 'name'], 'Jerry');\n   * console.log($$s.val(); // { name: 'Tom', frien: { 'name': 'Red'} }\n   *\n   * @example\n   * const s = slot({});\n   * s.setIn(['a', 1], 'abc'); // { a: [, 'abc'] }\n   *\n   * @return {Slot} this\n   * */\n  setIn(path, value) {\n    let o = this._value;\n    for (let i = 0; i < path.length - 1; ++i) {\n      let seg = path[i];\n      let nextSeg = path[i + 1];\n      o[seg] = o[seg] || (Number.isInteger(nextSeg)? []: {});\n      o = o[seg];\n    }\n    let lastSeg = path[path.length - 1];\n    if (typeof value == 'function') {\n      value = value.apply(this, [o[lastSeg]]);\n    }\n    o[lastSeg] = value;\n    this.val(Object.assign({}, this._value));\n    return this;\n  }\n};\n\npatch.assoc = patch.set;\npatch.assocIn = patch.setIn;\n\nexport default patch;\n","/**\n * these are a group of operations to mutate a slot with value type of number\n *\n * @lends Slot.prototype\n *\n * */\nconst numberOps = {\n\n  /**\n   * increment the slot's value, the slot's value should be of type number\n   *\n   * @param {number} cnt - the value to be added, default is 1\n   * @return {Slot} this\n   * */\n  inc(cnt=1) {\n    return this.val(this.val() + cnt);\n  },\n\n  /**\n   * decrement the slot's value, the slot's value should be of type number\n   *\n   * @param {number} cnt - the value to be deremented, default is 1\n   * @return {Slot} this\n   * */\n  dec(cnt=1) {\n    return this.val(this.val() - cnt);\n  },\n\n  /**\n   * get remainder the slot's value, the slot's value should be of type number\n   *\n   * @example\n   * const $$s = $$(17).mod(7);\n   * console.log($$s.val());  // output 3\n   *\n   * @param {number} n - the divisor\n   * @return {Slot} this\n   * */\n  mod(n) {\n    return this.val(this.val() % n);\n  },\n  /**\n   * multiply the slot's value by n, the slot's value should be of type number\n   *\n   * @param {number} n - the multiplier\n   * @return {Slot} this\n   * */\n  multiply(n) {\n    return this.val(this.val() * n);\n  },\n\n  /**\n   * divides the slot's value by n, the slot's value should be of type number\n   *\n   * @param {number} n - the divisor\n   * @return {Slot} this\n   * */\n  divide(n) {\n    return this.val(this.val() / n);\n  }\n};\n\nexport default numberOps;\n","/**\n * these are a group of operations to mutate a slot with value type of boolean\n *\n * @lends Slot.prototype\n *\n * */\nexport default {\n  /**\n   * toggle the Slot's value\n   * @return {Slot} this\n   * */\n  toggle() {\n    return this.val(!this.val());\n  },\n  /**\n   * make the Slot's value to be true\n   * @return {Slot} this\n   * */\n  on() {\n    return this.val(true);\n  },\n  /**\n   * make the Slot's value to be false\n   * @return {Slot} this\n   * */\n  off() {\n    return this.val(false);\n  }\n};\n\n","/**\n * these are a group of operations to mutate a slot with value type of array\n *\n * @lends Slot.prototype\n *\n * */\nexport default {\n  /**\n   * concat the Slot's value with an array\n   *\n   * @param {array} arr\n   * @return {Slot} this\n   * */\n  concat(arr) {\n    return this.val([].concat(this.val()).concat(arr));\n  },\n  /**\n   * map the Slot's value with a function\n   *\n   * @example\n   * const $$s = $$([1, 2, 3]);\n   * console.log($$s.map(it => it * 2).val()); // 2, 4, 6\n   *\n   * @param {function} fn\n   * @return {Slot} this\n   * */\n  map(fn) {\n    return this.val(this.val().map(fn));\n  },\n  /**\n   * filter the Slot's value with a function\n   *\n   * @example\n   * const $$s = $$([1, 2, 3, 4]);\n   * console.log($$s.filter(it => it % 2 == 0).val()); // 2, 4\n   *\n   * @param {function} fn\n   * @return {Slot} this\n   * */\n  filter(fn) {\n    let val = this.val();\n    return this.val(val.filter(fn));\n  },\n  /**\n   * slice the Slot's value\n   *\n   * @example\n   * const $$s = $$([1, 2, 3, 4]);\n   * console.log($$s.slice(1, 2).val()); // [2]\n   *\n   * @return {Slot} this\n   * */\n  slice() {\n    let val = this.val();\n    return this.val(val.slice.apply(val, Array.from(arguments)));\n  },\n  /**\n   * shift the Slot's value\n   *\n   * @example\n   * const $$s = $$([1, 2, 3, 4]);\n   * console.log($$s.shift().val()); // 2, 3, 4\n   *\n   * @return {Slot} this\n   * */\n  shift() {\n    this.val().shift();\n    this.val([].concat(this.val()));\n    return this;\n  },\n  /**\n   * shift the Slot's value\n   *\n   * @example\n   * const $$s = $$([2, 3, 4]);\n   * console.log($$s.unshift(1).val()); // 1, 2, 3, 4\n   *\n   * @return {Slot} this\n   * */\n  unshift(o) {\n    this.val().unshift(o);\n    this.val([].concat(this.val()));\n    return this;\n  },\n  /**\n   * push the Slot's value\n   *\n   * @example\n   * const $$s = $$([1, 2, 3]);\n   * console.log($$s.push(4).val()); // 1, 2, 3, 4\n   *\n   * @return {Slot} this\n   * */\n  push(o) {\n    this.val().push(o);\n    this.val([].concat(this.val()));\n    return this;\n\n  },\n  /**\n   * push the Slot's value\n   *\n   * @example\n   * const $$s = $$([1, 2, 3]);\n   * console.log($$s.pop().val()); // 1, 2\n   *\n   * @return {Slot} this\n   * */\n  pop() {\n    this.val().pop();\n    this.val([].concat(this.val()));\n    return this;\n  },\n  /**\n   * reverse the Slot's value\n   *\n   * @example\n   * const $$s = $$([1, 2, 3]);\n   * console.log($$s.pop().val()); // [3, 2, 1]\n   *\n   * @return {Slot} this\n   * */\n  reverse() {\n    this.val([].concat(this.val().reverse()));\n    return this;\n  }\n};\n"],"names":["Math","max","patch","debug","console","info","tag","val","Object","assign","keys","_value","value","apply","Array","isArray","concat","o","i","path","length","seg","nextSeg","Number","isInteger","lastSeg","assoc","set","assocIn","setIn","_uniqueId","prefix","_isEmptyObj","key","obj","hasOwnProperty","_objectValues","values","push","Slot","args","_id","_changeCbs","_followings","_followerMap","_offspringMap","_offspringLevels","_tag","defineProperty","valueFunc","followings","eager","follow","prototype","isTopmost","v","mutationTester","_mutationTester","change","offChange","filter","cb","clearChangeCbs","override","targetSlot","following","followerId","follower","_getAncestors","forEach","ancestor","replaceFollowing","splice","replaced","removeFollowing","_propogate","roots","followers","touch","involved","_setupOffsprings","cleanSlots","mutateRoot","changeCbArgs","level","dirty","oldV","slot","_valueFunc","map","it","setV","_colletFollowers","ret","slots","k","currentLevel","sort","a","b","propogate","context","callChangeCbs","oldValue","fork","func","connectTheSameFollowings","self","every","s","ancestors","shrink","mutate","slotValuePairs","call","relatedSlots","addToRelatedSlots","offspring","levels","p","mutateWith","mixin","cnt","slice","from","arguments","shift","unshift","pop","reverse","slotFnPairs","fn"],"mappings":"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"}